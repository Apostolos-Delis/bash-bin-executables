#!/usr/bin/env python

import string
import random
import sys
from collections import Counter
from optparse import OptionParser
import time


def eprint(*args, **kwargs):
    print(*args, file=sys.stderr, **kwargs)


def gen_password(size=8, letters=False, digits=False, new_line=False):
    if letters:
        possibilities = string.ascii_uppercase + string.ascii_lowercase
    elif digits:
        possibilities = string.digits
    else:
        possibilities = string.ascii_uppercase + string.ascii_lowercase + string.digits
    if new_line:
        return '\n'.join(random.choice(possibilities) for _ in range(size)) 
    else:
        return ''.join(random.choice(possibilities) for _ in range(size)) 


def hasNumbers(inputString: str)->bool:
    return any(char.isdigit() for char in inputString)

def charsUnique(inputString: str)->bool:
    occurences = Counter(inputString.replace('\n', ''))
    for occurence in occurences.values():
        if occurence > 1:
            return False
    return True

def main():
    start = time.time()
    version_msg = "random ascii string 2.2"
    usage_msg = """ras [OPTIONS]
  
    Output randomly generated from ascii vals."""
    parser = OptionParser(version=version_msg,
                          usage=usage_msg)
    parser.add_option("-n", "--head-count",
                      action="store", type='int', dest="count", default=-1,
                      help="Print n random ascii values")
    parser.add_option("-c", "--count-tries",
                      action="store_true", dest="tries", default=False,
                      help="""Print number of tries the generator needed to find
                      a valid passcode""")
    parser.add_option("-a", "--letters",
                      action="store_true", dest="letters", default=False,
                      help="Generate with only letters")
    parser.add_option("-d", "--digits",
                      action="store_true", dest="digits", default=False,
                      help="Generate with only digits")
    parser.add_option("-m", "--manual",
                      action="store_true", dest="manual", default=False,
                      help="Display all possible flags and uses")
    parser.add_option("-t", "--time",
                      action="store_true", dest="time", default=False,
                      help="Display the time it took to compute.")
    parser.add_option("-o", "--new-line",
                      action="store_true", dest="newline", default=False,
                      help="print each character on a new line")
    parser.add_option("-u", "--unique",
                      action="store_true", dest="unique", default=False,
                      help="make sure that each character is unique")
    options, args = parser.parse_args(sys.argv[1:])
    if options.manual:
        try:
            print("\033[0;40;32m\nUsage:", usage_msg)
            print("\nVersion:", version_msg)
            print("""\033[0m\nFlags:
      -n/--head-count:  Print n random ascii values
      -c/--count-tries: Print number of tries the generator needed to find a valid passcode
      -a/--letters:     Generate with only letters
      -d/--digits:      Generate with only digits
      -m/--manual:      Display flags and uses
      -t/--time:        Display the time it took to compute
      -o/--new-line:    print each character on a new line
      -u/--unique:      make sure that each character is unique
                """)
        except IOError as errno:
            parser.error("\033[0;40;31mOption Error: {}\033[0m".format(errno))
        sys.exit(0)
    
    if len(args) != 0:
        parser.error("Wrong number of operands")
    elif options.digits and options.letters:
        parser.error("Cannot have the -d flag with the -a flag")
    
    if options.digits:
        limit = 1
    elif options.letters:
        limit = 2
    else:
        limit = 3
    try:
        if options.count >= limit:
            if options.unique:
                if options.digits and options.count > 10:
                    parser.error("""Cannot have more than 10 characters if
the -d and -u flags are selected""")
                elif options.digits and options.count > 52:
                    parser.error("""Cannot have more than 52 characters if 
the -a and -u flags are selected""")
                elif options.count > 61:
                    parser.error("""Cannot have more than 61 characters if 
the -u flag is selected""")
            num_chars = options.count
        elif options.count == -1:
            num_chars = 8
        else:
            parser.error("""Invalid Number: {0} Pick an int > {1}
In general, with the following flags you need:
    -d/--digits: minimum -n value of 1
    -a/--letters: minimum -n value of 2
    other: minimum -n value of 3""".
                         format(options.count, limit))
            sys.exit(0)
    except IOError as errno:
        parser.error("\033[0;40;31mI/O error: {}\033[0m".format(errno))
    
    valid_password = False
    num_tries = 0
    while not valid_password:
        password = gen_password(num_chars, options.letters, options.digits, options.newline)
        num_tries += 1
        if options.unique:
            if options.digits and charsUnique(password):
                valid_password = True
            elif password.lower() != password and password.upper() != password and (options.letters or hasNumbers(password)) and charsUnique(password):
                valid_password = True
        elif options.digits: 
            valid_password = True
        elif password.lower() != password and password.upper() != password and (options.letters or hasNumbers(password)):
            valid_password = True
   
    end = time.time()
    try:
        print(password)
        if options.tries and num_tries == 1:
            eprint("Took {} try to generate.".format(num_tries))
        elif options.tries and num_tries > 1:
            eprint("Took {} tries to generate.".format(num_tries))
        if options.time:
            eprint("Took %0.3fs to compute." % ((end-start)*1.2))
    except IOError as errno:
        parser.error("\033[0;40;31mI/O error: {}\033[0m".format(errno))


if __name__ == "__main__":
    main()
